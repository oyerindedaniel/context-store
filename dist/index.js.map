{"version":3,"sources":["../src/context-store.ts"],"names":[],"mappings":";;;AAYA,IAAM,SAAA,GAAY,OAAO,MAAA,KAAW,WAAA;AAEpC,IAAM,yBAAA,GAA4B,YAAY,eAAA,GAAkB,SAAA;AA0BhE,SAAS,YAAA,CAAgB,GAAM,CAAA,EAAe;AAC5C,EAAA,IAAI,MAAA,CAAO,EAAA,CAAG,CAAA,EAAG,CAAC,GAAG,OAAO,IAAA;AAE5B,EAAA,IACE,OAAO,MAAM,QAAA,IACb,CAAA,KAAM,QACN,OAAO,CAAA,KAAM,QAAA,IACb,CAAA,KAAM,IAAA,EACN;AACA,IAAA,OAAO,KAAA;AAAA,EACT;AAEA,EAAA,MAAM,KAAA,GAAQ,MAAA,CAAO,IAAA,CAAK,CAAC,CAAA;AAC3B,EAAA,MAAM,KAAA,GAAQ,MAAA,CAAO,IAAA,CAAK,CAAC,CAAA;AAE3B,EAAA,IAAI,KAAA,CAAM,MAAA,KAAW,KAAA,CAAM,MAAA,EAAQ,OAAO,KAAA;AAE1C,EAAA,KAAA,MAAW,OAAO,KAAA,EAAO;AACvB,IAAA,IAAI,CAAC,MAAA,CAAO,SAAA,CAAU,eAAe,IAAA,CAAK,CAAA,EAAG,GAAG,CAAA,EAAG;AACjD,MAAA,OAAO,KAAA;AAAA,IACT;AACA,IAAA,IAAI,CAAC,OAAO,EAAA,CAAI,CAAA,CAAU,GAAG,CAAA,EAAI,CAAA,CAAU,GAAG,CAAC,CAAA,EAAG;AAChD,MAAA,OAAO,KAAA;AAAA,IACT;AAAA,EACF;AAEA,EAAA,OAAO,IAAA;AACT;AAEA,SAAS,YAAY,IAAA,EAAiB;AACpC,EAAA,IAAI,OAAA,CAAQ,GAAA,CAAI,QAAA,KAAa,aAAA,EAAe;AAC1C,IAAA,OAAA,CAAQ,KAAA,CAAM,sBAAA,EAAwB,GAAG,IAAI,CAAA;AAAA,EAC/C;AACF;AAOO,SAAS,gBAAmB,KAAA,EAAuB;AACxD,EAAA,MAAM,QAAA,GAAW,OAAU,KAAK,CAAA;AAChC,EAAA,MAAM,YAAA,GAAe,MAAA,iBAAyC,IAAI,GAAA,EAAK,CAAA;AACvE,EAAA,MAAM,QAAA,GAAW,OAA2B,IAAI,CAAA;AAEhD,EAAA,MAAM,YAAY,QAAA,CAAS,OAAA;AAC3B,EAAA,MAAM,UAAA,GAAa,CAAC,MAAA,CAAO,EAAA,CAAG,WAAW,KAAK,CAAA;AAE9C,EAAA,yBAAA,CAA0B,MAAM;AAC9B,IAAA,IAAI,CAAC,UAAA,EAAY;AAEjB,IAAA,QAAA,CAAS,OAAA,GAAU,KAAA;AAEnB,IAAA,YAAA,CAAa,OAAA,CAAQ,OAAA,CAAQ,CAAC,IAAA,EAAuB,QAAA,KAAyB;AAC5E,MAAA,IAAI;AACF,QAAA,MAAM,WAAA,GAAc,IAAA,CAAK,QAAA,CAAS,KAAK,CAAA;AAEvC,QAAA,IAAI,CAAC,YAAA,CAAa,IAAA,CAAK,SAAA,EAAW,WAAW,CAAA,EAAG;AAC9C,UAAA,IAAA,CAAK,SAAA,GAAY,WAAA;AACjB,UAAA,QAAA,EAAS;AAAA,QACX;AAAA,MACF,SAAS,KAAA,EAAO;AACd,QAAA,QAAA,CAAS,qBAAqB,KAAK,CAAA;AAAA,MACrC;AAAA,IACF,CAAC,CAAA;AAAA,EACH,CAAC,CAAA;AAED,EAAA,IAAI,CAAC,SAAS,OAAA,EAAS;AACrB,IAAA,QAAA,CAAS,OAAA,GAAU;AAAA,MACjB,WAAA,EAAa,MAAM,QAAA,CAAS,OAAA;AAAA,MAC5B,SAAA,EAAW,CAAC,QAAA,EAAsB,QAAA,KAA+B;AAC/D,QAAA,IAAI,YAAA;AAEJ,QAAA,IAAI;AACF,UAAA,YAAA,GAAe,QAAA,CAAS,SAAS,OAAO,CAAA;AAAA,QAC1C,SAAS,KAAA,EAAO;AACd,UAAA,QAAA,CAAS,sDAAsD,KAAK,CAAA;AACpE,UAAA,YAAA,GAAe,MAAA;AAAA,QACjB;AAEA,QAAA,YAAA,CAAa,OAAA,CAAQ,IAAI,QAAA,EAAU;AAAA,UACjC,QAAA;AAAA,UACA,SAAA,EAAW;AAAA,SACZ,CAAA;AACD,QAAA,OAAO,MAAM,YAAA,CAAa,OAAA,CAAQ,MAAA,CAAO,QAAQ,CAAA;AAAA,MACnD;AAAA,KACF;AAAA,EACF;AAEA,EAAA,OAAO,QAAA,CAAS,OAAA;AAClB;AAMO,SAAS,kBAAA,CACd,SACA,QAAA,EACG;AACH,EAAA,MAAM,KAAA,GAAQ,WAA+B,OAAO,CAAA;AAEpD,EAAA,IAAI,CAAC,KAAA,EAAO;AACV,IAAA,MAAM,IAAI,KAAA;AAAA,MACR;AAAA,KACF;AAAA,EACF;AAEA,EAAA,MAAM,kBAAkB,MAAA,CAAyC;AAAA,IAC/D,QAAA,EAAU;AAAA,GACX,CAAA;AAED,EAAA,MAAM,cAAA,GAAiB,YAAY,MAAM;AACvC,IAAA,IAAI;AACF,MAAA,MAAM,KAAA,GAAQ,MAAM,WAAA,EAAY;AAChC,MAAA,MAAM,QAAA,GAAW,SAAS,KAAK,CAAA;AAE/B,MAAA,IAAI,eAAA,CAAgB,QAAQ,QAAA,EAAU;AACpC,QAAA,MAAM,IAAA,GAAO,gBAAgB,OAAA,CAAQ,KAAA;AACrC,QAAA,IAAI,YAAA,CAAa,IAAA,EAAM,QAAQ,CAAA,EAAG;AAChC,UAAA,OAAO,IAAA;AAAA,QACT;AAAA,MACF;AAEA,MAAA,OAAA,CAAQ,IAAI,OAAO,CAAA;AAEnB,MAAA,eAAA,CAAgB,OAAA,GAAU,EAAE,QAAA,EAAU,IAAA,EAAM,OAAO,QAAA,EAAS;AAC5D,MAAA,OAAO,QAAA;AAAA,IACT,SAAS,KAAA,EAAO;AACd,MAAA,QAAA,CAAS,2BAA2B,KAAK,CAAA;AACzC,MAAA,OAAO,eAAA,CAAgB,OAAA,CAAQ,QAAA,GAC1B,eAAA,CAAgB,QAAQ,KAAA,GACxB,MAAA;AAAA,IACP;AAAA,EACF,CAAA,EAAG,CAAC,KAAA,EAAO,QAAQ,CAAC,CAAA;AAEpB,EAAA,MAAM,SAAA,GAAY,WAAA;AAAA,IAChB,CAAC,QAAA,KAAyB;AACxB,MAAA,IAAI,OAAA,GAAU,KAAA,CAAM,SAAA,CAAU,QAAA,EAAU,QAAQ,CAAA;AAChD,MAAA,OAAO,MAAM,OAAA,EAAQ;AAAA,IACvB,CAAA;AAAA,IACA,CAAC,OAAO,QAAQ;AAAA,GAClB;AAEA,EAAA,OAAO,oBAAA,CAAqB,SAAA,EAAW,cAAA,EAAgB,cAAc,CAAA;AACvE","file":"index.js","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\r\n\r\nimport {\r\n  Context,\r\n  useContext,\r\n  useRef,\r\n  useSyncExternalStore,\r\n  useCallback,\r\n  useLayoutEffect,\r\n  useEffect,\r\n} from \"react\";\r\n\r\nconst IS_CLIENT = typeof window !== \"undefined\";\r\n\r\nconst useIsomorphicLayoutEffect = IS_CLIENT ? useLayoutEffect : useEffect;\r\n\r\n/**\r\n * Selector function type: picks slice S from full state T.\r\n */\r\nexport type Selector<T, S> = (state: T) => S;\r\n\r\n/**\r\n * Store interface that gets passed through React Context.\r\n */\r\nexport interface StoreApi<T> {\r\n  getSnapshot: () => T;\r\n  subscribe: (listener: () => void, selector: Selector<T, any>) => () => void;\r\n}\r\n\r\n/**\r\n * Listener data for tracking selector + last selected value.\r\n */\r\ninterface ListenerData<T> {\r\n  selector: Selector<T, any>;\r\n  lastValue: any;\r\n}\r\n\r\n/**\r\n * Shallow equality comparison for objects.\r\n */\r\nfunction shallowEqual<T>(a: T, b: T): boolean {\r\n  if (Object.is(a, b)) return true;\r\n\r\n  if (\r\n    typeof a !== \"object\" ||\r\n    a === null ||\r\n    typeof b !== \"object\" ||\r\n    b === null\r\n  ) {\r\n    return false;\r\n  }\r\n\r\n  const keysA = Object.keys(a);\r\n  const keysB = Object.keys(b);\r\n\r\n  if (keysA.length !== keysB.length) return false;\r\n\r\n  for (const key of keysA) {\r\n    if (!Object.prototype.hasOwnProperty.call(b, key)) {\r\n      return false;\r\n    }\r\n    if (!Object.is((a as any)[key], (b as any)[key])) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction logError(...args: unknown[]) {\r\n  if (process.env.NODE_ENV === \"development\") {\r\n    console.error(\"[ContextStore Error]\", ...args);\r\n  }\r\n}\r\n\r\n/**\r\n * Hook: Creates a stable store reference for any value that can be passed to React Context.\r\n * The store reference never changes - only the internal state updates.\r\n * Only notifies listeners whose selected slice actually changed.\r\n */\r\nexport function useContextStore<T>(value: T): StoreApi<T> {\r\n  const stateRef = useRef<T>(value);\r\n  const listenersRef = useRef<Map<() => void, ListenerData<T>>>(new Map());\r\n  const storeRef = useRef<StoreApi<T> | null>(null);\r\n\r\n  const prevValue = stateRef.current;\r\n  const hasChanged = !Object.is(prevValue, value);\r\n\r\n  useIsomorphicLayoutEffect(() => {\r\n    if (!hasChanged) return;\r\n\r\n    stateRef.current = value;\r\n\r\n    listenersRef.current.forEach((data: ListenerData<T>, listener: () => void) => {\r\n      try {\r\n        const newSelected = data.selector(value);\r\n\r\n        if (!shallowEqual(data.lastValue, newSelected)) {\r\n          data.lastValue = newSelected;\r\n          listener();\r\n        }\r\n      } catch (error) {\r\n        logError(\"Error in selector\", error);\r\n      }\r\n    });\r\n  });\r\n\r\n  if (!storeRef.current) {\r\n    storeRef.current = {\r\n      getSnapshot: () => stateRef.current,\r\n      subscribe: (listener: () => void, selector: Selector<T, any>) => {\r\n        let currentValue: any;\r\n\r\n        try {\r\n          currentValue = selector(stateRef.current);\r\n        } catch (error) {\r\n          logError(\"Error in initial selector call during subscription\", error);\r\n          currentValue = undefined;\r\n        }\r\n\r\n        listenersRef.current.set(listener, {\r\n          selector,\r\n          lastValue: currentValue,\r\n        });\r\n        return () => listenersRef.current.delete(listener);\r\n      },\r\n    };\r\n  }\r\n\r\n  return storeRef.current;\r\n}\r\n\r\n/**\r\n * Hook: select a slice from context store with shallow equality.\r\n * Only re-renders when the selected slice actually changes.\r\n */\r\nexport function useShallowSelector<T, S>(\r\n  context: Context<StoreApi<T> | null>,\r\n  selector: Selector<T, S>\r\n): S {\r\n  const store = useContext<StoreApi<T> | null>(context);\r\n\r\n  if (!store) {\r\n    throw new Error(\r\n      \"useShallowSelector must be used within a Context.Provider\"\r\n    );\r\n  }\r\n\r\n  const lastSelectedRef = useRef<{ hasValue: boolean; value?: S }>({\r\n    hasValue: false,\r\n  });\r\n\r\n  const createSnapshot = useCallback(() => {\r\n    try {\r\n      const state = store.getSnapshot();\r\n      const selected = selector(state);\r\n\r\n      if (lastSelectedRef.current.hasValue) {\r\n        const prev = lastSelectedRef.current.value as S;\r\n        if (shallowEqual(prev, selected)) {\r\n          return prev;\r\n        }\r\n      }\r\n\r\n      console.log(\"dddhh\");\r\n\r\n      lastSelectedRef.current = { hasValue: true, value: selected };\r\n      return selected;\r\n    } catch (error) {\r\n      logError(\"Error in createSnapshot\", error);\r\n      return lastSelectedRef.current.hasValue\r\n        ? (lastSelectedRef.current.value as S)\r\n        : (undefined as S);\r\n    }\r\n  }, [store, selector]);\r\n\r\n  const subscribe = useCallback(\r\n    (listener: () => void) => {\r\n      let cleanup = store.subscribe(listener, selector);\r\n      return () => cleanup();\r\n    },\r\n    [store, selector]\r\n  );\r\n\r\n  return useSyncExternalStore(subscribe, createSnapshot, createSnapshot);\r\n}\r\n"]}